Centeredness:

1 # spots entirely contained in center zone = 'spotsContainedInCenter'
2 # spots touching center zone = 'nuSpotsTouchCenter'
3 # spots mostly in center zone = 'nuSpotsMostlyInCenter'
4 # spot centroids in center zone =  "nuSpotCentroidsInCenter'
5 avg spot centroid distance to center of all spots = 'avgDist2CenterAllSpots'
6 avg spot centroid distance to center of spots in center zone (excludes edge spots) = 'avgDist2CenterCenterSpots'
7 % percent of total spot area in center = 'propSpotsInCenter'
8 % center zone covered by spots = 'centerCoveredbySpots'
9 Spot on centroid = 'spotOnCentroid'

Edgeness:

10  # spots entirely contained in edge zone = 'nuSpotsContainedInEdge'
11  # spots touching edge zone in some way = 'nuSpotsTouchEdge'
12  % percent of total spot area in edge = 'propSpotsInEdge'
13  # spots mostly in edge zone (>50%) = 'nuSpotsMostlyInEdge'
14  % edge zone covered = 'edgeCoveredbySpots'
15  # spots touching actual edge (not zone)  = 'nuSpotsTouchActualEdge'
16  % length of real petal edge (not zone) covered = 'realEdgeSpotted'
17  avg dist of outline of spots to edge = 'avgDistSpotEdge2Edge'
18  avg dist of centroid of spots to edge = 'avgDistSpotCentroid2Edge'

Throat:

19 % throat zone covered = 'throatCoveredbySpots'
20 % percent of total spot area in throat = 'propSpotsInthroat'
21 # spots touching throat zone = 'nuSpotsTouchThroat'
22 # spots mostly in throat zone = 'nuSpotsMostlyInThroat'
23 # spots touching actual cut/base = 'nuSpotsTouchCut'

General polygon:

24  Biggest spot = 'biggestSpotArea'
25  Smallest spot (is this useful at all?) = 'smallestSpotArea'
26  Avg size = 'avgSpotsize'
26  Median size = 'medSpotsize'
27  Number of spots = 'nuSpots'

Regions of petal, by quadrant (as oriented in my pipeline)

28  Spots in proximal half (quadrants I and II)
29  Spots in Distal half (quadrants III and IV)
30  Spots in quadrant I
31  Spots in quadrant II
32  Spots in quadrant III
33  Spots in quadrant IV


## figure them out
## turn them into functions
## make a function that checks polys, tries to repair.
## (should be in our digitization polies?)
## make module that generates panda
## convert to R for melia


