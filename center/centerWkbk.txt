## let's try to find a way to quantify "centeredness". 

%% in matlab

%% flower
fname = "P416F1";
%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% our petal structures with polygons are here, right now:
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% they'll migrate to dougdir eventually...
%% jpegs are here
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/";

%% load the matlab structure for this flower:

cd(wd);
load(objDir + fname + ".mat")
[a,b,c] = fileparts(Petals.fullName);
jpegName = char(dougDir + b + c);

imshow(jpegName);

%% look the polygons. We'll use the center petal, "right" image:

%% for some reason, other petal outlines appeared, blips. Just checking, what do they 
%% look like?

plot(Petals.Polys.right.petal)
plot(Petals.Polys.right.petal(2))
%% they're trash. Need to exclude these when making polygons...
%% deal with that later

plot(Petals.Polys.right.petal(1))


%% can we scale and recenter the petal outline?

aa = Petals.Polys.right.petal(1);
bb = area(aa);
sc = sqrt(1/bb)
cc = scale(aa, sc);
[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY)

plot(tPetal);
area(tPetal)

%% looks okay

%% okay, so now the spots:

Petals.Polys.right.spots

counter = 1
for i =  Petals.Polys.right.spots;
    disp(i)
    cc = scale(i, sc);
    tSpot(counter) = translate(cc, -cenX, -cenY)
    counter = counter + 1
end;

plot(tPetal);
hold on;
plot(tSpot)
hold off;

Petals.Polys.right.spots

%% okay, works. 

P371F2 = (objDir + "P371F2" + ".mat");
P371F2 = load(P371F2)
[a,b,c] = fileparts(P371F2.Petals.fullName);
jpegName = char(dougDir + b + c);
imshow(jpegName);


hold off;

plot(P371F2.Petals.Polys.right.petal)

counter = 1;
for i = P371F2.Petals.Polys.right.spots;
    w = waitforbuttonpress;
    disp ("spot #" + counter)
    %plot(P371F2.Petals.Polys.right.petal)
    hold on;
    plot(i)
    hold off;
    counter = 1 + counter;
end;

%% we want spot #1:

P371F2 = (objDir + "P371F2" + ".mat");
P371F2 = load(P371F2)
[a,b,c] = fileparts(P371F2.Petals.fullName);
jpegName = char(dougDir + b + c);
imshow(jpegName);

petal = P371F2.Petals.Polys.right.petal;
spot = P371F2.Petals.Polys.right.spots(1);
[cX, cY] = centroid(spot)
[CX, CY] = centroid(petal)

plot(petal, 'FaceColor','white')
hold on;
plot(spot, 'FaceColor','red')


%plot(petal, 'FaceColor','white')
hold on
plot(spot, 'FaceColor','red');
plot(cX, cY, '+', 'MarkerSize', 15, 'Color', 'red');
plot(CX, CY, '+', 'MarkerSize', 15, 'Color', 'blue');
hold off


hold off;

hold on;

%%%%%%%% 

P378F2 = (objDir + "P378F2" + ".mat");
P378F2 = load(P378F2);
[a,b,c] = fileparts(P378F2.Petals.fullName);
jpegName = char(dougDir + b + c);
imshow(jpegName);

%% 

plot(P378F2.Petals.Polys.right.petal)

counter = 1;
for i = P378F2.Petals.Polys.right.spots;
    w = waitforbuttonpress;
    disp ("spot #" + counter)
    %plot(P378F2.Petals.Polys.right.petal)
    hold on;
    plot(i)
    hold off;
    counter = 1 + counter;
end;

%% we want spot#3


plot(P378F2.Petals.Polys.right.petal)
hold on;
plot(P378F2.Petals.Polys.right.spots(3))
hold off;

petal = P378F2.Petals.Polys.right.petal;
spot = P378F2.Petals.Polys.right.spots(3);
spots = union(P378F2.Petals.Polys.right.spots);

[CX, CY] = centroid(petal);
[cX, cY] = centroid(spot);
[csX, csY] = centroid(spots);

plot(P378F2.Petals.Polys.right.petal)
hold on;
plot(spots, "FaceColor","red")
plot(P378F2.Petals.Polys.right.spots(3), "FaceColor","green")
plot(cX, cY, 'o', 'MarkerSize', 15, 'Color', 'green');
plot(cX, cY, '+', 'MarkerSize', 15, 'Color', 'green');
plot(CX, CY, 'o', 'MarkerSize', 15, 'Color', 'blue');
plot(CX, CY, '+', 'MarkerSize', 15, 'Color', 'blue');
plot(csX, csY, 'o', 'MarkerSize', 15, 'Color', 'red');
plot(csX, csY, '+', 'MarkerSize', 15, 'Color', 'red');
hold off;


%% okay, but our metric is average distance, not distance 
%% of the center of mass of the aggregate spots. 

%% the problem with the aggregate center of mass of the spots
%% is that symmetry of spots starts to cancel out distances:
%% a ring of pretty distant spots cancel each other out and 
%% the aggregate centroid ends up pretty close to the center.

%% replot the above without aggregating the polygons:



petal = P378F2.Petals.Polys.right.petal;
spot = P378F2.Petals.Polys.right.spots(3);
spots = P378F2.Petals.Polys.right.spots; %% not union

%% petal graphic:
plot(petal, "FaceColor","yellow", "FaceAlpha",0.5)
hold on;
plot(spots, "FaceColor","red","FaceAlpha",0.7)
plot(spot, "FaceColor","white","FaceAlpha",0, "EdgeColor",'green','Linewidth',3)

hold off;

[CX, CY] = centroid(petal);
[cX, cY] = centroid(spot);
[csX, csY] = centroid(spots);

plot(P378F2.Petals.Polys.right.petal)

hold on;

plot(CX, CY, 'o', 'MarkerSize', 15, 'Color', 'blue');
plot(CX, CY, '+', 'MarkerSize', 15, 'Color', 'blue');
plot(csX, csY, 'o', 'MarkerSize', 15, 'Color', 'black');
plot(csX, csY, '+', 'MarkerSize', 15, 'Color', 'black');
plot(cX, cY, 'o', 'MarkerSize', 15, 'Color', 'green');
plot(cX, cY, '+', 'MarkerSize', 15, 'Color', 'green');

hold off;

%% how can we get an average distance from the center for all of these?

%%%%%%%% edge polygon %%%%%%%%%%%%%%

%% let's make a polygon that follows the edge of the petals, and comes in for 
%% some distance. 

polyin = polyshape({[0 0 1 3],[0.5 1.5 1.5 0.5]},{[0 3 3 0],[0.5 0.5 1.5 1.5]});
plot(polyin)
polyout1 = polybuffer(polyin,0.1);
hold on
plot(polyout1)
hold off

%% so for our petals:

petal = P378F2.Petals.Polys.right.petal;

plot(petal)

hold on

aa = polybuffer(petal,-100 );

plot(aa)

plot(aa, "FaceColor","yellow", "FaceAlpha",0.5)
hold on

plot(petal, "FaceAlpha",1)

hold off

%% how can we build a margin that is a function of the area 
%% of the polygons


petal = P378F2.Petals.Polys.right.petal;

bb = area(petal);

sc = 1/sqrt(bb);

cc = scale(aa, sc);

[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY);
plot(tPetal)
area(tPetal)



%% flower
fname = "P378F2";
%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% our petal structures with polygons are here, right now:
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% they'll migrate to dougdir eventually...
%% jpegs are here
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/";
cd(wd);
load(objDir + fname + ".mat") %% get the matlab struct for this flower
[a,b,c] = fileparts(Petals.fullName);
jpegName = char(dougDir + b + c); 

imshow(jpegName)

aa = Petals.Polys.right.petal(1);
bb = area(aa);
sc = 1/sqrt(bb);
cc = scale(aa, sc);
[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY);
plot(tPetal)
area(tPetal)

%% that works. What was the difference?



%% getting lost. start over:

clear



%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% our petal structures with polygons are here, right now:
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% they'll migrate to dougdir eventually...
%% jpegs are here
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/";

P378F2 = (objDir + "P378F2" + ".mat");
P378F2 = load(P378F2);
[a,b,c] = fileparts(P378F2.Petals.fullName);
jpegName = char(dougDir + b + c);
imshow(jpegName);

petal = P378F2.Petals.Polys.right.petal;
spot = P378F2.Petals.Polys.right.spots(3);
spots = P378F2.Petals.Polys.right.spots;


%% try our standardization protocol:

area(petal)

bb = area(petal);
sc = 1/sqrt(bb);
cc = scale(petal, sc);
[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY);
%% spots
counter = 1;
for i = spots;
    cc = scale(i, sc);
    tSpots(counter) = translate(cc, -cenX, -cenY);
    counter = counter + 1;
end;

tSpot = tSpots(3);

%plot(tSpot)

%% standardized petal graphic:

hold off;

plot(tPetal, "FaceColor","yellow", "FaceAlpha",0.2)
hold on;
plot(edgePoly, "FaceColor","blue","FaceAlpha",0.3)
plot(tSpots, "FaceColor","red","FaceAlpha",0.7)
plot(tSpot, "FaceColor","white","FaceAlpha",0, "EdgeColor",'green','Linewidth',3)
[CX, CY] = centroid(tPetal);
[cX, cY] = centroid(tSpot);
[csX, csY] = centroid(tSpots);
plot(CX, CY, 'o', 'MarkerSize', 15, 'Color', 'blue');
plot(CX, CY, '+', 'MarkerSize', 15, 'Color', 'blue');
plot(csX, csY, 'o', 'MarkerSize', 15, 'Color', 'black');
plot(csX, csY, '+', 'MarkerSize', 15, 'Color', 'black');
plot(cX, cY, 'o', 'MarkerSize', 15, 'Color', 'green');
plot(cX, cY, '+', 'MarkerSize', 15, 'Color', 'green');

%% add margin:

%middlePoly = polybuffer(tPetal,-0.1);
%edgePoly = subtract(tPetal, middlePoly);

hold off;
plot(tPetal)
hold on;
plot(edgePoly, "FaceAlpha",0.3)

%% how do we make the margin a constant % of the mass?

area(edgePoly)

area(tPetal)

t = 0
perc = 0
while perc < .25;
    disp("t = " + t)
    t = t - 0.001
    middlePoly = polybuffer(tPetal,t);
    edgePoly = subtract(tPetal, middlePoly);
    perc = area(edgePoly) / area(tPetal)
end;
t=t+0.001 %% back up 
middlePoly = polybuffer(tPetal,t);
edgePoly = subtract(tPetal, middlePoly);

hold off;
plot(tPetal)
hold on;
plot(edgePoly, "FaceAlpha",0.3)

%% can we exlude a polygon based on its overlap with this?


inEdge = intersect(tSpot, edgePoly)
area(inEdge) / area(tSpot) %% 

area(inEdge) 
area(tSpot) 
%% seems right

Can we look at our spots as an array?

inEdge = intersect(tSpots, edgePoly)

 area(tSpots) %% 

hold off;

counter = 1;
for i = tSpots;
    w = waitforbuttonpress;
    disp ("spot #" + counter)
    hold on;
    plot(i)
    hold off;
    counter = 1 + counter;
end;

plot(edgePoly)

%% polygon #1 is a good one to look at...
%% should be mostly in the edge poly:

inEdge = intersect(tSpots(1), edgePoly)

plot(inEdge)
hold on;
plot(edgePoly)
plot(tSpots(1))
hold off;



%% can we do this as an array?
allInEdge = intersect(tSpots, edgePoly)


plot(allInEdge)

%% can we get a percentage by array?

area(allInEdge)./area(tSpots)

%% works. A cutoff might be 50% in this margin qualifies you as an edge polygon?

%% This, along with the size of the margin, could be tweaked. 

notEdge = area(allInEdge)./area(tSpots) < 0.5

%% so to get an array of the non-ring polygons:

tSpots(notEdge)
plot(tPetal)
hold on;
plot(tSpots(notEdge)) %% works
hold off;


%% to calculate our centeredness is simple:

cSpots = tSpots(notEdge)
[cX, cY] = centroid(cSpots);

origin = [0 0]

plot(cX,cY)

X = [0 cX]
Y = [0 cY]

pdist2(X, Y)

%% works okay. 

%% can we make a function that accepts a photo name and file location, 
%% and spits out a centeredness statistic?

%% not really, not without running it from BASH. 
%% matlab sucks

%% so longass script it is...

%%%%%%%%%%%%%%%% one petal %%%%%%%%%%%%%%
%% flower
fname = "P416F1";
%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% matlab structure directory
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% image directory
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/"; 
cd(wd); %% goto working directory
load(objDir + fname + ".mat") %% get the matlab struct for this flower
[a,b,c] = fileparts(Petals.fullName);
jpegName = char(dougDir + b + c); %% might need for a sanity check
marginSize = 0.25; %% set margin of exclusion, percentage of petal area
inEdgeSize = 0.5; %% set amount of spot that is in margin that merits exclusion
%%%%%%%
petal = Petals.Polys.right.petal(1);
spots = Petals.Polys.right.spots;
%%%%%%%
bb = area(petal);
sc = 1/sqrt(bb);
cc = scale(petal, sc);
[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY);
%% spots
counter = 1;
for i = spots;
    cc = scale(i, sc);
    tSpots(counter) = translate(cc, -cenX, -cenY);
    counter = counter + 1;
end;
%%%%%%%%%%
t = 0;
perc = 0;
while perc < marginSize; %% set above, percent of petal area
    disp("t = " + t)
    t = t - 0.001;
    middlePoly = polybuffer(tPetal,t);
    edgePoly = subtract(tPetal, middlePoly);
    perc = area(edgePoly) / area(tPetal);
    disp("% = " + perc)
end;
t=t+0.001 %% back up
middlePoly = polybuffer(tPetal,t);
edgePoly = subtract(tPetal, middlePoly);
%%%%%%%%%%%
allInEdge = intersect(tSpots, edgePoly); 
area(allInEdge)./area(tSpots) %% how much of each of our polygons are in this margins?
notEdge = area(allInEdge)./area(tSpots) < inEdgeSize %% which do we keep?
cSpots = tSpots(notEdge);
%%%%%%%%%%%
[cX, cY] = centroid(cSpots);
dsX = [cX, 0];
dsY = [cY, 0];
X = [dsX' dsY'];
D = pdist(X);
centerednes = mean(D)


figure; 
subplot(1,2,1);
    plot(tPetal,"FaceColor","yellow", "FaceAlpha",0.5)
    hold on;
    plot(tSpots, "FaceColor","red","FaceAlpha",0.7)
    daspect([1 1 1])
    hold off;
subplot(1,2,2);
    hold off;
    plot(tPetal,"FaceColor","yellow", "FaceAlpha",0.5)
    hold on;
    plot(edgePoly,"FaceColor","blue", "FaceAlpha",0.2)
    plot(cSpots,"FaceColor","red","FaceAlpha",0.7)
    plot(cX, cY, 'blx')
    daspect([1 1 1])
    hold off;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% so to loop through the three petals:

petalNames = ["left" "mid" "right"]

for i = petalNames;
    disp(i)
    cc = Petals.Polys.(i);
    disp(cc)
end;


%%%% but first, through the various levels of 
%% the margin:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
margins = [0:.10:.50]
%% flower
fname = "P416F1";
%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% matlab structure directory
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% image directory
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/"; 
cd(wd); %% goto working directory
load(objDir + fname + ".mat") %% get the matlab struct for this flower
[a,b,c] = fileparts(Petals.fullName);
jpegName = char(dougDir + b + c); %% might need for a sanity check
petal = Petals.Polys.right.petal(1);
spots = Petals.Polys.right.spots;
bb = area(petal);
sc = 1/sqrt(bb);
cc = scale(petal, sc);
[cenX,cenY] = centroid(cc);
tPetal = translate(cc, -cenX, -cenY);
%% spots
counter = 1;
for i = spots;
    cc = scale(i, sc);
    tSpots(counter) = translate(cc, -cenX, -cenY);
    counter = counter + 1;
end;
clear counter
figure; %% start plot
subplot(3,3,[1,3]);
imshow(jpegName);
title(fname)
counter = 4;
for margI = margins
    marginSize = margI; %% set margin of exclusion, percentage of petal area
    inEdgeSize = 0.5; %% set amount of spot that is in margin that merits exclusion
    %%%%%%%%%%
    t = 0;
    perc = 0;
    while perc <= marginSize; %% set above, percent of petal area
        %disp("t = " + t)
        t = t - 0.001;
        middlePoly = polybuffer(tPetal,t);
        edgePoly = subtract(tPetal, middlePoly);
        perc = area(edgePoly) / area(tPetal);
        %disp("% = " + perc)
    end;
    t=t+0.001; %% back up
    middlePoly = polybuffer(tPetal,t);
    edgePoly = subtract(tPetal, middlePoly);
    %%%%%%%%%%%
    allInEdge = intersect(tSpots, edgePoly); 
    area(allInEdge)./area(tSpots); %% how much of each of our polygons are in this margins?
    notEdge = area(allInEdge)./area(tSpots) < inEdgeSize; %% which do we keep?
    cSpots = tSpots(notEdge);
    %%%%%%%%%%%
    [cX, cY] = centroid(cSpots);
    dsX = [cX, 0];
    dsY = [cY, 0];
    X = [dsX' dsY'];
    D = pdist(X);
    centeredness = mean(D);
    ti = ('m = ' + string(margI) +", c = " + string(centeredness));
    subplot(3,3,counter);
        hold off;
        plot(tPetal, 'FaceAlpha', 0)
        hold on;
        plot(edgePoly, 'FaceAlpha', 0)
        plot(cSpots, 'FaceColor', 'red')
        title(ti)
        daspect([1 1 1]);
    counter = counter + 1;
end;




%% can we do as before, create a large pdf of this to leaf through?


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear
%% matlab structure directory
objDir="/Users/danthomas/Documents/speckling/make_polygons/matObjW_pol/";
%% working directory
wd="/Users/danthomas/Documents/speckling/center";
%% image directory
dougDir = "/Users/danthomas/Documents/speckling/dougRaster/Rotated_and_Cropped/"; 
cd(wd); %% goto working directory
margins = [0:.10:.50]; %% margin sizes to test
files = dir(dougDir + 'P*.mat');
for file = files';
    disp(file.name)
    %% setup flower
    load(objDir + file.name) %% get the matlab struct for this flower
    [a,b,c] = fileparts(Petals.fullName);
    jpegName = char(dougDir + b + c); %% for header image 
    %% go to the ventral, central ("right") petal
    petal = Petals.Polys.right.petal(1);
    spots = Petals.Polys.right.spots;
    bb = area(petal);
    sc = 1/sqrt(bb);
    cc = scale(petal, sc);
    [cenX,cenY] = centroid(cc);
    tPetal = translate(cc, -cenX, -cenY);
    %% spots
    counter = 1;
    for i = spots;
        cc = scale(i, sc);
        tSpots(counter) = translate(cc, -cenX, -cenY);
        counter = counter + 1;
    end;
    clear counter;
    figure; %% start plot
    subplot(3,3,[1,3]);
    imshow(jpegName);
    title(b) %% b was our flower name
    counter = 4; %% start at 4 because our first three spots are taken up by the photo
    for margI = margins
        marginSize = margI; %% set margin of exclusion, percentage of petal area
        inEdgeSize = 0.5; %% set amount of spot that is in margin that merits exclusion
        %%%%%%%%%%
        t = 0;
        perc = 0;
        while perc <= marginSize; %% set above, percent of petal area
            %disp("t = " + t)
            t = t - 0.001;
            middlePoly = polybuffer(tPetal,t);
            edgePoly = subtract(tPetal, middlePoly);
            perc = area(edgePoly) / area(tPetal);
            %disp("% = " + perc)
        end;
        t=t+0.001; %% back up
        middlePoly = polybuffer(tPetal,t);
        edgePoly = subtract(tPetal, middlePoly);
        %%%%%%%%%%%
        allInEdge = intersect(tSpots, edgePoly); 
        area(allInEdge)./area(tSpots); %% how much of each of our polygons are in this margins?
        notEdge = area(allInEdge)./area(tSpots) < inEdgeSize; %% which do we keep?
        cSpots = tSpots(notEdge);
        %%%%%%%%%%%
        [cX, cY] = centroid(cSpots);
        dsX = [cX, 0];
        dsY = [cY, 0];
        X = [dsX' dsY'];
        D = pdist(X);
        centeredness = mean(D);
        ti = ('m = ' + string(margI) +", c = " + string(centeredness));
        subplot(3,3,counter);
            hold off;
            plot(tPetal, 'FaceAlpha', 0)
            hold on;
            plot(edgePoly, 'FaceAlpha', 0)
            plot(cSpots, 'FaceColor', 'red')
            title(ti)
            daspect([1 1 1]);
        counter = counter + 1;
    end;
    clear counter;
    clear tSpots;
    phN = '/Users/danthomas/Documents/speckling/center/mkPDF/' + string(b) + '.pdf';
    print(phN, '-dpdf','-bestfit')
    close
end;


    phN = '/Users/danthomas/Documents/speckling/center/mkPDF/' + string(b) + '.pdf';


%%% edited +/- debugged version in "makeMarginSweep.m"

%% let's combine these new pdfs:

cd /Users/danthomas/Documents/speckling/center

/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py -o CenteredPipeline_220818.pdf /Users/danthomas/Documents/speckling/center/mkPDF/*
